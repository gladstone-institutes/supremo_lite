name: Build and Test Wheels

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install

      - name: Build sdist
        run: poetry build --format=sdist

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: dist-sdist
          path: dist/*.tar.gz

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-python@v5

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.23.3

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  test_wheels:
    name: Test built wheels
    needs: [build_wheels, build_sdist]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*"
          path: dist/
          merge-multiple: true

      - name: Install wheel
        shell: bash
        run: |
          python -m pip install --upgrade pip
          python -m pip install numpy pandas pyfaidx pytest
          # Install the wheel for this platform and Python version
          python -m pip install dist/*.whl || python -m pip install dist/*.tar.gz

      - name: Test import
        run: |
          python -c "import supremo_lite; print(f'supremo_lite version: {supremo_lite.__version__}')"
          python -c "import supremo_lite; from supremo_lite.sequence_utils import encode_sequence; result = encode_sequence('ATCG'); print(f'Test encoding shape: {result.shape}')"

  upload_pypi:
    name: Upload to PyPI
    needs: [test_wheels, build_wheels, build_sdist]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: pypi
      url: https://pypi.org/p/supremo-lite
    permissions:
      id-token: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*"
          path: dist/
          merge-multiple: true

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
