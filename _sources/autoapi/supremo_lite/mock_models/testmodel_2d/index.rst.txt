supremo_lite.mock_models.testmodel_2d
=====================================

.. py:module:: supremo_lite.mock_models.testmodel_2d

.. autoapi-nested-parse::

   Mock 2D genomic prediction model for contact map testing and demonstrations.

   This module provides a simple PyTorch model that mimics realistic 2D genomic prediction
   architectures (e.g., for chromatin contact maps, Hi-C predictions). It is intended for:
   1. Testing 2D prediction alignment functionality
   2. Providing runnable examples for users without trained models

   **NOT for actual genomic predictions** - this model returns constant values and has
   no learned parameters.

   Model Architecture Characteristics:
   - **Binning**: Predictions at 2D grid resolution (bin_size × bin_size)
   - **Cropping**: Edge bins removed from all sides
   - **Output shape**: (batch_size, n_targets, n_final_bins, n_final_bins)

   .. rubric:: Example

   >>> from supremo_lite.mock_models import TestModel2D
   >>> import torch
   >>>
   >>> model = TestModel2D(seq_length=2048, bin_length=64, crop_length=256, n_targets=1)
   >>> x = torch.randn(4, 4, 2048)  # (batch, channels, length)
   >>> predictions = model(x)
   >>> predictions.shape
   torch.Size([4, 1, 24, 24])  # Full contact matrix after cropping



Attributes
----------

.. autoapisummary::

   supremo_lite.mock_models.testmodel_2d.TORCH_AVAILABLE


Classes
-------

.. autoapisummary::

   supremo_lite.mock_models.testmodel_2d.TestModel2D


Module Contents
---------------

.. py:data:: TORCH_AVAILABLE
   :value: True


.. py:class:: TestModel2D(seq_length, bin_length, crop_length=0, n_targets=1)

   Bases: :py:obj:`torch.nn.Module`


   Mock 2D genomic prediction model (e.g., for contact maps).

   This model demonstrates typical 2D genomic deep learning architecture features:
   - Accepts one-hot encoded DNA sequences
   - Outputs 2D contact matrix predictions at binned resolution
   - Applies edge cropping on all sides
   - Returns full symmetric contact matrix

   **Warning**: Returns constant values (ones). Not for actual predictions.

   :param seq_length: Length of input sequences in base pairs
   :type seq_length: int
   :param bin_length: Number of base pairs per prediction bin (in each dimension)
   :type bin_length: int
   :param crop_length: Number of base pairs to crop from each edge (default: 0)
   :type crop_length: int, optional
   :param n_targets: Number of prediction targets per bin pair (default: 1)
   :type n_targets: int, optional

   .. rubric:: Examples

   Basic usage:

   >>> model = TestModel2D(seq_length=2048, bin_length=64)
   >>> x = torch.randn(4, 4, 2048)  # (batch, channels, length)
   >>> out = model(x)
   >>> # Output is full contact matrix
   >>> # For n=32 bins: 32×32 matrix
   >>> out.shape
   torch.Size([4, 1, 32, 32])

   With cropping:

   >>> model = TestModel2D(seq_length=4096, bin_length=128, crop_length=512)
   >>> model.n_initial_bins
   32
   >>> model.crop_bins
   4
   >>> model.n_final_bins
   24
   >>> # Contact matrix: 24×24


   .. py:attribute:: seq_length


   .. py:attribute:: bin_length


   .. py:attribute:: crop_length
      :value: 0



   .. py:attribute:: n_targets
      :value: 1



   .. py:attribute:: crop_bins


   .. py:attribute:: n_initial_bins


   .. py:attribute:: n_final_bins


   .. py:method:: forward(x)

      Forward pass returning mock 2D contact map predictions.

      :param x: Input tensor of shape (batch_size, 4, seq_length)
                Channel dimension should be 4 (one-hot encoded A, C, G, T)
      :type x: torch.Tensor

      :returns: Mock predictions of shape (batch_size, n_targets, n_final_bins, n_final_bins)
                Full symmetric contact matrix after cropping
                Contains all ones (not meaningful predictions)
      :rtype: torch.Tensor



   .. py:method:: training_step(batch, batch_idx)

      Mock training step for demonstration purposes.

      Shows how 2D predictions would be trained.
      This is for educational purposes only - the model has no learnable parameters.



